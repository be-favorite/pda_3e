# Chapter 2

## Tab completion

Tab 키를 누르면 앞에 적어둔 네이밍에 매칭되는 객체, 함수 등을 찾아준다.

```{python}
an_apple = 27
an_example = 42
```

위 코드를 실행하고 `an<Tab>`을 시도 해볼 것. 특정 객체에 대해 .을 타이핑하고 Tab을 눌러보면, 해당 객체에 사용 가능한 메서드(method), 속성(attribute)[^chapter2-1]에 관한 자동완성도 제공해준다.

[^chapter2-1]: 클래스 내부에 포함되어 있는 메서드나 변수를 의미함

```{python}
b = [1, 2, 3]
```

`b.<Tab>`을 시도해보도록 하자. list 객체에서 사용할 수 있는 메서드들을 제시해줄 것이다. 이는 모듈에서도 마찬가지 이다:

```{python}
import datetime
```

마찬가지로 `datetime.<Tab>`을 시도해보자. 9개의 메서드를 만날 수 있을 것이다.

## Introspection

변수 뒤에 물음표(`?`)를 써보자. 해당 객체에 관한 일반적인 정보들을 제공해준다:

```{python}
#| eval: FALSE
b = [1, 2, 3]
b?
print?
```

이를 객체 검사(object introspection)이라 한다. 만약 객체가 함수나 인스턴스 메서드인 경우 docstring도 표시된다. 물론, docstring을 정의한 경우에 한해서 이다. 다음의 예시를 참고하자:

```{python}
def add_numbers(a, b):
    """
    Add two numbers together

    Returns
    -------
    the_sum : type of arguments
    """
    return a + b
```

```{python}
#| eval: FALSE
add_numbers?
```

## Dates and times

`strftime()` : `datetime` 객체를 `string`으로 포맷팅 해주는 메서드

```{python}
from datetime import datetime, date, time
dt = datetime(2011, 10, 29, 20, 30, 21)
type(dt)
```

```{python}
type(dt.strftime("%Y-%m-%d %H:%M"))
```

`strptime()`: `str` 객체를 `datetime`으로 포맷팅

```{python}
datetime.strptime("20091031", "%Y%m%d")
```

```{python}
type(datetime.strptime("20091031", "%Y%m%d"))
```

`datetime` 객체간 차이는 `timedelta` 타입으로 계산됨:

```{python}
dt2 = datetime(2011, 11, 15, 22, 30)
delta = dt2 - dt
delta
```

```{python}
type(delta)
```

`timedelta`에 `datetime` 객체를 더해주면 `timedelta`만큼 더해진 날짜로 연산됨.

```{python}
dt
```

```{python}
dt + delta
```
