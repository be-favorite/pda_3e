[
  {
    "objectID": "chapter2.html#tab-completion",
    "href": "chapter2.html#tab-completion",
    "title": "1  Chapter 2",
    "section": "1.1 Tab completion",
    "text": "1.1 Tab completion\nTab 키를 누르면 앞에 적어둔 네이밍에 매칭되는 객체, 함수 등을 찾아준다.\n\nan_apple = 27\nan_example = 42\n\n위 코드를 실행하고 an<Tab>을 시도 해볼 것. 특정 객체에 대해 .을 타이핑하고 Tab을 눌러보면, 해당 객체에 사용 가능한 메서드(method), 속성(attribute)1에 관한 자동완성도 제공해준다.\n\nb = [1, 2, 3]\n\nb.<Tab>을 시도해보도록 하자. list 객체에서 사용할 수 있는 메서드들을 제시해줄 것이다. 이는 모듈에서도 마찬가지 이다:\n\nimport datetime\n\n마찬가지로 datetime.<Tab>을 시도해보자. 9개의 메서드를 만날 수 있을 것이다."
  },
  {
    "objectID": "chapter2.html#introspection",
    "href": "chapter2.html#introspection",
    "title": "1  Chapter 2",
    "section": "1.2 Introspection",
    "text": "1.2 Introspection\n변수 뒤에 물음표(?)를 써보자. 해당 객체에 관한 일반적인 정보들을 제공해준다:\n\nb = [1, 2, 3]\nb?\nprint?\n\n이를 객체 검사(object introspection)이라 한다. 만약 객체가 함수나 인스턴스 메서드인 경우 docstring도 표시된다. 물론, docstring을 정의한 경우에 한해서 이다. 다음의 예시를 참고하자:\n\ndef add_numbers(a, b):\n    \"\"\"\n    Add two numbers together\n\n    Returns\n    -------\n    the_sum : type of arguments\n    \"\"\"\n    return a + b\n\n\nadd_numbers?"
  },
  {
    "objectID": "chapter2.html#dates-and-times",
    "href": "chapter2.html#dates-and-times",
    "title": "1  Chapter 2",
    "section": "1.3 Dates and times",
    "text": "1.3 Dates and times\nstrftime() : datetime 객체를 string으로 포맷팅 해주는 메서드\n\nfrom datetime import datetime, date, time\ndt = datetime(2011, 10, 29, 20, 30, 21)\ntype(dt)\n\ndatetime.datetime\n\n\n\ntype(dt.strftime(\"%Y-%m-%d %H:%M\"))\n\nstr\n\n\nstrptime(): str 객체를 datetime으로 포맷팅\n\ndatetime.strptime(\"20091031\", \"%Y%m%d\")\n\ndatetime.datetime(2009, 10, 31, 0, 0)\n\n\n\ntype(datetime.strptime(\"20091031\", \"%Y%m%d\"))\n\ndatetime.datetime\n\n\ndatetime 객체간 차이는 timedelta 타입으로 계산됨:\n\ndt2 = datetime(2011, 11, 15, 22, 30)\ndelta = dt2 - dt\ndelta\n\ndatetime.timedelta(days=17, seconds=7179)\n\n\n\ntype(delta)\n\ndatetime.timedelta\n\n\ntimedelta에 datetime 객체를 더해주면 timedelta만큼 더해진 날짜로 연산됨.\n\ndt\n\ndatetime.datetime(2011, 10, 29, 20, 30, 21)\n\n\n\ndt + delta\n\ndatetime.datetime(2011, 11, 15, 22, 30)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "스터디: Python for Data Analysis 3E",
    "section": "",
    "text": "서문\n웹에 배포되어 있는 Python for Data Analysis, 3E (McKinney 2022)를 공부한 흔적을 남기고자 합니다. 책의 모든 내용을 담진 않습니다. 개인적으로 기록하고 싶은 부분만 정리할 예정입니다.\n\n\n\n\nMcKinney, Wes. 2022. Python for Data Analysis, 3E. 3rd ed. O‘REILLY. https://wesmckinney.com/book/."
  },
  {
    "objectID": "chapter3.html#data-structures-and-sequences",
    "href": "chapter3.html#data-structures-and-sequences",
    "title": "2  Chapter 3",
    "section": "2.1 Data Structures and Sequences",
    "text": "2.1 Data Structures and Sequences\n\n2.1.1 Tuple\n변수를 꺼낼 때(unpacking) 흔히들 사용하는 방법은 튜플이나 리스트 시퀀스를 반복해주는 것:\n\nseq = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nfor a, b, c in seq:\n    print(f'a={a}, b={b}, c={c}')\n\na=1, b=2, c=3\na=4, b=5, c=6\na=7, b=8, c=9\n\n\n튜플의 어떤 시작점으로부터 여러 요소를 한꺼번에 꺼내고 싶다면 *rest라는 구문을 사용해주면, 리스트 형태로 꺼내줌:\n\nvalues = 1, 2, 3, 4, 5\na, b, *rest = values\na\nb\nrest\n\n[3, 4, 5]\n\n\n요 rest는 여러 요소들을 버리고 싶을 때도 사용함. rest라는 이름에 딱히 특별한 의미는 없고, 파이썬 사용자들은 보통 언더스코어(_)를 활용(컨벤션이라고 보면됨)하여 원치않는 변수들을 제거함.\n\na, b, *_ = values\na\nb\n\n2\n\n\n튜플은 한 번 만들어지면 수정이 불가능한 객체이기 때문에, 인스턴스 메서드가 꽤 적다(light on). 특히 특정 값의 개수를 세는 count 유용하게 쓰인다. 물론 list에서도 사용 가능하다.\n\na = (1, 2, 2, 2, 3, 4, 2)\na.count(2)\n\n4\n\n\n\n\n2.1.2 List"
  }
]